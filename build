#!/bin/bash

export ROOT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"

if [ -z ${REPO} ]; then
	export REPO=nerva
fi

echo Building ${REPO}

#if [ ! -d "${ROOT_DIR}/context/src/${REPO}" ]; then
#	cd ${ROOT_DIR}/context/src
#	git clone --recursive https://bitbucket.org/nerva-project/${REPO}
#else
#	cd ${ROOT_DIR}/context/src/${REPO}
#	git pull
#fi


source ${ROOT_DIR}/context/src/${REPO}/builder/helpers
detectversion

export DL_CACHE_DIR="${ROOT_DIR}/context/toolchains/.dl-cache"
export NDK_VER="android-ndk-r17c"
export BOOST_VER_DOT="1.68.0"
export BOOST_VER_US="boost_1_68_0"
export NDK_DL_LINK="https://dl.google.com/android/repository/${NDK_VER}-linux-x86_64.zip"
export BOOST_DL_LINK="https://dl.bintray.com/boostorg/release/${BOOST_VER_DOT}/source/${BOOST_VER_US}.tar.gz"

function checkimage()
{
	var=$1
	img=$(docker images --format '{{.Repository}}:{{.Tag}}' | grep ${var})

	if [ "$img" == "${var}" ]; then
		echo 1
	else
		echo 0
	fi
}

function init()
{
	if [ ! -d "${ROOT_DIR}/builds" ]; then
		mkdir -p "${ROOT_DIR}/builds"
	fi

	if [ ! -d "${DL_CACHE_DIR}" ]; then
		mkdir -p "${DL_CACHE_DIR}"
	fi

	# Download the Android NDK
	if [ ! -f "${DL_CACHE_DIR}/${NDK_VER}.zip" ]; then	
		wget -q --show-progress ${NDK_DL_LINK} -O "${DL_CACHE_DIR}/${NDK_VER}.zip"
	fi

	# Download Boost
	if [ ! -f "${DL_CACHE_DIR}/${BOOST_VER_US}.tar.gz" ]; then	
		wget -q --show-progress ${BOOST_DL_LINK} -O "${DL_CACHE_DIR}/${BOOST_VER_US}.tar.gz"
	fi
}

# baseimage <platform>
function baseimage()
{
	iname=builder:$1

	if [ $(checkimage $iname) == 0 ]; then
		echo "Base image does not exist. Creating now..."
		docker build -t $iname -f ./dockerfiles/base/$1.Dockerfile .
	else
		echo "Base image already exists"
	fi
}

function dynamic()
{
	#todo: needs updating
	platform=$1
	arch=$2

	i=${REPO}_$platform:$arch

	dockerfile="${ROOT_DIR}/context/src/${platform}_${arch}.Dockerfile"

	if [ -f "${dockerfile}" ]; then
		rm ${dockerfile}
	fi

	echo "FROM $platform:$arch" > "${dockerfile}"
	cat "${ROOT_DIR}/deps/${platform}.deps" >> "${dockerfile}"
	echo "ARG NERVA_VERSION" >> "${dockerfile}"
	echo "ARG BUILD_ARCH" >> "${dockerfile}"
	echo "COPY /nerva/ /opt/nerva/"  >> "${dockerfile}"

	docker build \
	--build-arg BUILD_ARCH=${arch} \
	--build-arg NERVA_VERSION=${NERVA_VERSION} \
	-t ${i} -f ./context/src/${platform}_${arch}.Dockerfile ./context/src

	c=$platform_$arch

	buildcmd="/opt/nerva/builder/linux build-release"

	[ "$(docker ps -a | grep ${c})" ] && docker rm ${c}
	docker run --env NERVA_BUILD_DISTRO=${platform} --env NERVA_BUILD_DISTRO_VERSION=${arch} -i --name ${c} -t ${i} ${buildcmd}
	docker cp ${c}:/opt/nerva/nerva-v${NERVA_VERSION}_$platform-$arch.zip ${ROOT_DIR}/builds
	docker rm ${c}

	rm ${dockerfile}
}

function static()
{
	platform=$1
	arch=$2

	iname="nerva_${platform}:${arch}"
	cname="${REPO}_${platform}_${arch}"

	if [ $(checkimage ${iname}) == 0 ]; then
		docker build \
		--build-arg BUILD_ARCH=${arch} \
		--build-arg NERVA_VERSION=${NERVA_VERSION} \
		-t ${iname} -f ./context/${platform}.Dockerfile ./context
	else
		echo "Image already exists, skipping"
	fi
	
	c=$platform_$arch

	if [ ! "$(docker ps -a | grep ${cname})" ]; then
		docker create -i --name ${cname} -t ${iname}
		rm -rf ${ROOT_DIR}/context/src/${REPO}/builder/build
		docker cp ${ROOT_DIR}/context/src/${REPO} ${cname}:/opt/toolchain/${REPO}
	else
		docker start ${cname}
		docker exec -it ${cname} /bin/bash -c "cd /opt/toolchain/${REPO} && git pull"
	fi
	docker cp ${ROOT_DIR}/context/src/${REPO} ${cname}:/opt/toolchain/${REPO}
	docker start ${cname}
	docker exec -it ${cname} /bin/bash -c "/opt/toolchain/build repo ${REPO}"
	docker cp ${cname}:/opt/toolchain/${REPO}/${REPO}-v${NERVA_VERSION}_$platform-$arch.zip ${ROOT_DIR}/builds
}

function exec()
{
	platform=$1
	arch=$2
	cname="${REPO}_${platform}_${arch}"

	docker exec -it ${cname} /bin/bash
}

function all()
{
	static linux x64
	static android armv7
	static android arm64v8a
}

cd ${ROOT_DIR}

$1 $2 $3
