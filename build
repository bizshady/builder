#!/bin/bash

export ROOT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"

source ${ROOT_DIR}/version
echo Building NERVA ${NERVA_VERSION}

export DL_CACHE_DIR="${ROOT_DIR}/context/toolchains/.dl-cache"
export NDK_VER="android-ndk-r17c"
export BOOST_VER_DOT="1.68.0"
export BOOST_VER_US="boost_1_68_0"
export NDK_DL_LINK="https://dl.google.com/android/repository/${NDK_VER}-linux-x86_64.zip"
export BOOST_DL_LINK="https://dl.bintray.com/boostorg/release/${BOOST_VER_DOT}/source/${BOOST_VER_US}.tar.gz"

function checkimage()
{
	var=$1
	img=$(docker images --format '{{.Repository}}:{{.Tag}}' | grep ${var})

	if [ "$img" == "${var}" ]; then
		echo 1
	else
		echo 0
	fi
}

function init()
{
	if [ ! -d "${ROOT_DIR}/builds" ]; then
		mkdir "${ROOT_DIR}/builds"
	fi

	# Download the Android NDK
	if [ ! -f "${DL_CACHE_DIR}/${NDK_VER}.zip" ]; then	
		wget -q --show-progress ${NDK_DL_LINK} -O "${DL_CACHE_DIR}/${NDK_VER}.zip"
	fi

	# Download Boost
	if [ ! -f "${DL_CACHE_DIR}/${BOOST_VER_US}.tar.gz" ]; then	
		wget -q --show-progress ${BOOST_DL_LINK} -O "${DL_CACHE_DIR}/${BOOST_VER_US}.tar.gz"
	fi

	git submodule update --remote --merge --recursive
}

# baseimage <platform>
function baseimage()
{
	iname=builder:$1

	if [ $(checkimage $iname) == 0 ]; then
		echo "Base image does not exist. Creating now..."
		docker build -t $iname -f ./dockerfiles/base/$1.Dockerfile .
	else
		echo "Base image already exists"
	fi
}

function dynamic()
{
	platform=$1
	arch=$2

	i=nerva_$platform:$arch

	dockerfile="${ROOT_DIR}/context/src/${platform}_${arch}.Dockerfile"

	if [ -f "${dockerfile}" ]; then
		rm ${dockerfile}
	fi

	echo "FROM $platform:$arch" > "${dockerfile}"
	cat "${ROOT_DIR}/deps/${platform}.deps" >> "${dockerfile}"
	echo "ARG NERVA_VERSION" >> "${dockerfile}"
	echo "ARG BUILD_ARCH" >> "${dockerfile}"
	echo "COPY /nerva/ /opt/nerva/"  >> "${dockerfile}"

	docker build \
	--build-arg BUILD_ARCH=${arch} \
	--build-arg NERVA_VERSION=${NERVA_VERSION} \
	-t ${i} -f ./context/src/${platform}_${arch}.Dockerfile ./context/src

	c=$platform_$arch

	buildcmd="/opt/nerva/builder docker_build_dynamic_linux ${NERVA_VERSION}"

	[ "$(docker ps -a | grep ${c})" ] && docker rm ${c}
	docker run --env NERVA_BUILD_DISTRO=${platform} --env NERVA_BUILD_DISTRO_VERSION=${arch} -i --name ${c} -t ${i} ${buildcmd}
	docker cp ${c}:/opt/nerva/nerva-${NERVA_VERSION}_$platform-$arch.zip ${ROOT_DIR}/builds
	docker rm ${c}

	rm ${dockerfile}
}

function static()
{
	platform=$1
	arch=$2

	i=nerva_$platform:$arch
	c=$platform_$arch

	docker build \
	--build-arg BUILD_ARCH=${arch} \
	--build-arg NERVA_VERSION=${NERVA_VERSION} \
	-t ${i} -f ./context/${platform}.Dockerfile ./context
	
	c=$platform_$arch

	buildcmd="/opt/toolchain/build nerva ${NERVA_VERSION}"

	[ "$(docker ps -a | grep ${c})" ] && docker rm ${c}
	docker run -i --name ${c} -t ${i} ${buildcmd}
	docker cp ${c}:/opt/toolchain/nerva-${NERVA_VERSION}_$platform-$arch.zip ${ROOT_DIR}/builds
	docker rm ${c}
}

function run()
{
	CONTAINER_NAME=run_tmp

	[ "$(docker ps -a | grep ${CONTAINER_NAME})" ] && docker rm ${CONTAINER_NAME}
	docker run -i --name ${CONTAINER_NAME} -t $1 /bin/bash
	docker rm ${CONTAINER_NAME}
}

function all_static()
{
	static linux x64
	static android armv7
	static android arm64v8a
}

function ubuntu()
{
	dynamic ubuntu 16.04
	dynamic ubuntu 17.10
	dynamic ubuntu 18.04
}

function debian()
{
	dynamic debian stable
	dynamic debian testing
	dynamic debian unstable
}

function fedora()
{
	dynamic fedora 27
	dynamic fedora 28
	dynamic fedora 29
}

function all()
{
	all_static

	ubuntu
	debian
	fedora
}

cd ${ROOT_DIR}

$1 $2 $3
