#!/bin/bash

export ROOT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"

source ${ROOT_DIR}/version
echo Building NERVA ${NERVA_VERSION}

export DL_CACHE_DIR="${ROOT_DIR}/.dl-cache"
export NDK_VER="android-ndk-r17c"
export BOOST_VER_DOT="1.68.0"
export BOOST_VER_US="boost_1_68_0"
export NDK_DL_LINK="https://dl.google.com/android/repository/${NDK_VER}-linux-x86_64.zip"
export BOOST_DL_LINK="https://dl.bintray.com/boostorg/release/${BOOST_VER_DOT}/source/${BOOST_VER_US}.tar.gz"

function checkimage()
{
	var=$1
	img=$(docker images --format '{{.Repository}}:{{.Tag}}' | grep ${var})

	if [ "$img" == "${var}" ]; then
		echo 1
	else
		echo 0
	fi
}

function init()
{
	if [ ! -d "${ROOT_DIR}/builds" ]; then
		mkdir "${ROOT_DIR}/builds"
	fi

	# Download the Android NDK
	if [ ! -f "${DL_CACHE_DIR}/${NDK_VER}.zip" ]; then	
		wget -q --show-progress ${NDK_DL_LINK} -O "${DL_CACHE_DIR}/${NDK_VER}.zip"
	fi

	# Download Boost
	if [ ! -f "${DL_CACHE_DIR}/${BOOST_VER_US}.tar.gz" ]; then	
		wget -q --show-progress ${BOOST_DL_LINK} -O "${DL_CACHE_DIR}/${BOOST_VER_US}.tar.gz"
	fi

	# Download/update NERVA
	if [ ! -d "${ROOT_DIR}/nerva" ]; then
		git clone --recursive https://bitbucket.org/nerva-project/nerva
	else
		cd "${ROOT_DIR}/nerva"
		git pull
	fi
}

# baseimage <platform>
# <platform> =	android
#				linux
#				linux-arm
#				windows
function baseimage()
{
	iname=builder:$1

	if [ $(checkimage $iname) == 0 ]; then
		echo "Base image does not exist. Creating now..."
		docker build -t $iname -f ./dockerfiles/base/$1.Dockerfile .
	else
		echo "Base image already exists"
	fi
}

function fetch()
{
	platform=$1
	arch=$2

	i=$platform:$arch
	c=$platform_$arch

	[ "$(docker ps -a | grep ${c})" ] && docker rm ${c}
	docker run -i --name ${c} -t ${i} /bin/true
	docker cp ${c}:/opt/toolchain/nerva-${NERVA_VERSION}_$platform-$arch.zip ${ROOT_DIR}/builds
	docker rm ${c}
}

function make()
{
	platform=$1
	arch=$2

	i=$platform:$arch
	c=$platform_$arch

	baseimage $platform

	docker build \
	--build-arg BUILD_ARCH=${arch} \
	--build-arg NERVA_VERSION=${NERVA_VERSION} \
	-t ${i} -f ./dockerfiles/build/$platform.Dockerfile .

	fetch
}

function run()
{
	CONTAINER_NAME=run_tmp

	[ "$(docker ps -a | grep ${CONTAINER_NAME})" ] && docker rm ${CONTAINER_NAME}
	docker run -i --name ${CONTAINER_NAME} -t $1 /bin/bash
	docker rm ${CONTAINER_NAME}
}

function rebuild()
{
	${ROOT_DIR}/clean

	init

	images=( "android:armv7" "android:arm64v8a" "linux:x64" "windows:x64" )

	for i in "${images[@]}"
	do
		if [ $(checkimage $i) == 1 ]; then
			docker rmi $i
		fi
	done

	make android armv7
	make android arm64v8a

	make linux x64

	#todo: x86 seems to fail building boost. investigate, or not...
	#make windows x86
	
	#Win64 comiles but gives errors from boost.local at runtime
	#make windows x64
}

cd ${ROOT_DIR}

$1 $2 $3
